const querystring = require("querystring");
const request = require("request");
const var_dump = require("var_dump");

class Librus {
  login = "kambar25";
  password = "sKLB123#";
  logged_in = false;
  Token = null;
  host = "https://api.librus.pl/";

  authUsername(login, password) {
    var linkauth = this.host + "OAuth/Token";
    let params = {
      username: this.login,
      password: this.password,
      librus_long_term_token: "1",
      grant_type: "password",
    };

    params = querystring.stringify(params); // changing into querystring eg 'A=a&B=b'

    var r = request.post(
      {
        headers: {
          Authorization:
            "Basic Mjg6ODRmZGQzYTg3YjAzZDNlYTZmZmU3NzdiNThiMzMyYjE=",
            "Content-Type": "application/x-www-form-urlencoded",
        },
        url: linkauth,
        body: params,
      },
      function (error, response, body) {
        let result = JSON.parse(body);
        this.logged_in = true;
        this.Token = "Bearer " + result["access_token"];
        console.log(this.logged_in);
        return result
      }
    );
    console.log("========")
    console.log(result);
    //var_dump(this);
    return new Promise(function(resolve, reject) {
        // Only `delay` is able to resolve or reject the promise
        setTimeout(function() {
          resolve(); // After 3 seconds, resolve the promise with value 42
        }, 1000);
        return this
      });
    
  }

  /* Get Data */

  getApiData(url) {
    if (this.logged_in) {
      const linkdata = host + "2.0/" + url;

      request.get(
        {
          headers: {
            Authorization: this.Token,
            "Content-Type": "application/x-www-form-urlencoded",
          },
          url: linkdata,
        },
        function (error, response, body) {
          result = JSON.parse(body);
          console.log(result);
        }
      );
    }
  }

  /*examplePromise = new Promise((resolve) => {
    this.authUsername("", "");
    resolve();
  });*/
}

const api = new Librus();
/*api.authUsername("", "").then(function () {
    api.getApiData("Grades", this);
});*/


api.authUsername("", "").then(function () {
    console.log(api)
});

/*api.examplePromise.then(
    function(){
        console.log(this.Token)
    }
)*/

/*function kickOff() {
  return new Promise(function (resolve, reject) {
    console.log("start");

    setTimeout(function () {
      resolve();
    }, 1000);
  }).then(function () {
    console.log("before stop");
    return " end";
  });
}

kickOff().then(function (result) {
  console.log(result);
});*/

/*api.authUsername("", "").then(function (result) {
    console.log(result)
    return this
});*/

/*function delay() {
    api.Token = "1233"
    //console.log(api.Token)
    // `delay` returns a promise
    return new Promise(function(resolve, reject) {
      // Only `delay` is able to resolve or reject the promise
      setTimeout(function() {
        resolve(42); // After 3 seconds, resolve the promise with value 42
      }, 1000);
    });
  }
  
delay()
    .then(function(v) { // `delay` returns a promise
      console.log(api); // Log the value once it is resolved
    })
    .catch(function(v) {
      // Or do something else if it is rejected
      // (it would not happen in this example, since `reject` is not called).
    });
*/

function sendRequest() {
    return new Promise((resolve, reject) => {
      var reqbody;
      var resp;
  
      reqbody = {};
  
      request.post(
        {
          headers: {
            "Authentication": "Basic Mjg6ODRmZGQzYTg3YjAzZDNlYTZmZmU3NzdiNThiMzMyYjE=",
            "Content-Type": "application/x-www-form-urlencoded",
          },
          url: "https://api.librus.pl/",
          body: reqbody
        },
        function(error, response, body) {
          if (error) reject(error);
          resp = convert.xml2js(body, { compact: true });
          resolve(resp);
        }
      );
    });
  }
  
  async function sample() {
    const res = await sendRequest().catch(err => console.log(err));
    console.log(res);
  }
  
  sample();  // This function is run.